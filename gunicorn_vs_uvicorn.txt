In a recent concurrent test, we discovered that handling concurrent requests in Shiny for Python is failing. We're all seeking a quick and sustainable solution to address this issue. One suggestion is to use a Gunicorn server with NGINX, which can enable concurrency by leveraging worker threads.

Please review the following documentation, and if you find this approach promising, we can proceed with implementation.

https://www.geeksforgeeks.org/fast-api-gunicorn-vs-uvicorn/

https://stackshare.io/stackups/gunicorn-vs-uvicorn

https://flask-sock.readthedocs.io/en/latest/web_servers.html

https://support.openanalytics.eu/t/shiny-for-python-app-fails-to-load/2528/4

https://www.easydevguide.com/posts/gunicorn_concurrency


An example: Flask app with guniconrn + NGINX for optimal scalability
https://loadforge.com/guides/deploying-flask-applications-with-gunicorn-and-nginx-for-scalability



Feedback:

I’d love to hear your perspective on how I’ve been contributing to the team. Are there any areas you think I should focus on to have an even bigger impact

I am aiming for promotion, I would like to get your thoughts on what can i do to stand out?


I’ve been considering how I can contribute more across teams, but I’m unsure where to begin. Do you have any suggestions on where I could start or how I can make the most impact?



I first created a sample Django app (v4.2), pulled a list of users created by me, and successfully used a POST API to create users. I also added a screenshot to the Jira ticket for reference.

Next, I applied the same process to our simulation app. The challenge was that I initially used Django’s default ORM for database changes, which worked fine for the USER model but wasn't aligned with our non-ORM approach. To address this, I implemented a custom signal notification for handling data creation and updates. While it required a few additional functions, it's now working well without relying on the ORM
